{"id":1,"parentId":-1,"label":"snippets","lastId":56,"children":[{"id":39,"parentId":42,"label":"Vault Token Create","value":"vault token create \\\n  -period=30m \\\n  -format=json \\\n  -orphan=true \\\n  -policy=boundary-controller \\\n  -policy=ssh-policy \\\n  -no-default-policy=true \\\n  -renewable=true","children":[],"resolveSyntax":true},{"id":41,"parentId":1,"label":"Boundary Demo","folder":true,"children":[{"id":44,"parentId":41,"label":"Terminal Commands","folder":true,"children":[{"id":45,"parentId":44,"label":"Boundary Authenticate","value":"boundary authenticate password \\\n  -password=\"env://boundary_password\" \\\n  -login-name=njackson \\\n  -auth-method-id=${boundary_auth_method_id} \\\n  -format=json \\\n  | jq -r .item.attributes.token > .boundary_token","children":[]}]},{"id":42,"parentId":44,"label":"Workers","folder":true,"children":[{"id":43,"parentId":42,"label":"Terminal Commands","folder":true,"children":[{"id":46,"parentId":43,"label":"Boundary Worker Create","value":"boundary-worker workers create \\\n  controller-led \\\n  -token=\"file://.boundary_token\" ","children":[]},{"id":55,"parentId":43,"label":"Frontend Worker Exec","value":"docker exec -it boundary-worker-frontend.container.shipyard.run /bin/sh","children":[]},{"id":56,"parentId":43,"label":"Target Create SSH","value":"boundary targets create ssh \\\n   -token=\"file://.boundary_token\" \\\n   -name=\"vm\" \\\n   -description=\"SSH access for virtual machine\" \\\n   -default-port=22 \\\n   -address=vm.container.shipyard.run \\\n   -scope-id=${boundary_scope_id\\} \\\n   -egress-worker-filter='\"/name\" == \"frontend\"'","children":[],"resolveSyntax":true}]},{"id":47,"parentId":42,"label":"Config","folder":true,"children":[{"id":48,"parentId":47,"label":"Workers Script Vars","value":"echo \"[$(date +%T)] Generating controller led token for boundary worker\"\n\n# The name to use for the worker\nworker_name=\"${worker_name\\}\"\n\n# The HCP cluster id, cluster id will be set in the system.d job as an environment var\ncluster_id=\"${cluster_id\\}\"\n\n# Username and password used to obtain the worker registration token\nusername=\"${username\\}\"\npassword=\"${password\\}\"\n\n# The auth id used for authentication\nauth_method_id=\"${auth_method_id\\}\"\n\n# Base url for the HCP cluster\nbase_url=\"https://${cluster_id\\}.boundary.hashicorp.cloud/v1\"\nauth_url=\"${base_url\\}/auth-methods/${auth_method_id\\}:authenticate\"\ntoken_url=\"${base_url\\}/workers:create:controller-led\"","children":[],"resolveSyntax":true},{"id":49,"parentId":47,"label":"Worker Script Authentication","value":"# Authenticate with Boundary using the username and password and fetch the token\necho \"[$(date +%T)] Authenticating with Boundary controller\"\nauth_request=\"{\\\"attributes\\\":{\\\"login_name\\\":\\\"${username\\}\\\",\\\"password\\\":\\\"${password\\}\\\"}}\"\nresp=$(curl ${auth_url\\} -s -d \"${auth_request\\}\")\ntoken=$(echo ${resp\\} | sed 's/.*\"token\":\"\\([^\"]*\\)\".*/\\1/g')","children":[],"resolveSyntax":true},{"id":50,"parentId":47,"label":"Worker Script Controller Token","value":"# Generate the controller led token request\necho \"[$(date +%T)] Calling boundary API to generate controller led token\"\nresp=$(curl ${token_url\\} -s -H \"Authorization: Bearer ${token\\}\" -d \"{\\\"scope_id\\\":\\\"global\\\",\\\"name\\\":\\\"${worker_name\\}\\\"}\")\ncontroller_generated_activation_token=$(echo ${resp\\} | sed 's/.*\"controller_generated_activation_token\":\"\\([^\"]*\\)\".*/\\1/g')\nworker_id=$(echo ${resp\\} | sed 's/{\"id\":\"\\([^\"]*\\)\".*/\\1/g')\n\n# Write the worker id so we can use this to delete the worker on deallocation\necho \"[$(date +%T)] Writing worker id file to ./worker_id\"\necho ${worker_id\\} > ./worker_id","children":[],"resolveSyntax":true},{"id":51,"parentId":47,"label":"Worker Script Config","value":"echo \"[$(date +%T)] Writing config to ./worker_config.hcl\"\ncat <<-EOT > ./worker_config.hcl\n  disable_mlock = true\n  log_level = \"debug\"\n\n  hcp_boundary_cluster_id = \"${cluster_id\\}\"\n\n  listener \"tcp\" {\n    address = \"0.0.0.0:9202\"\n    purpose = \"proxy\"\n  }\n\n  worker {\n    auth_storage_path=\"/boundary/auth_data\"\n\n    controller_generated_activation_token = \"${controller_generated_activation_token\\}\"\n  \n    tags {\n      type   = [\"vault\"]\n    }\n  }\nEOT\n\necho \"[$(date +%T)] Generated worker config for worker: ${worker_id\\}\"","children":[],"resolveSyntax":true},{"id":52,"parentId":47,"label":"Worker Script Trap","value":"# trap the interrupt so that the worker deregisters on exit\ntrap \"/boundary/deregister.sh\" HUP INT QUIT TERM USR1","children":[]},{"id":53,"parentId":47,"label":"Worker Script Deregister","value":"#!/bin/sh -e\necho \"[$(date +%T)] Deregister boundary worker\"\n\n# Read the worker id from the file written on startup\nworker_id=$(cat ./worker_id)\n\n# Base url for the HCP cluster\nbase_url=\"https://${cluster_id\\}.boundary.hashicorp.cloud/v1\"\nauth_url=\"${base_url\\}/auth-methods/${auth_method_id\\}:authenticate\"\ndereg_url=\"${base_url\\}/workers/${worker_id\\}\"\n\n# Authenticate with Boundary using the username and password and fetch the token\necho \"[$(date +%T)] Authenticating with Boundary controller\"\nauth_request=\"{\\\"attributes\\\":{\\\"login_name\\\":\\\"${username\\}\\\",\\\"password\\\":\\\"${password\\}\\\"}}\"\nresp=$(curl ${auth_url\\} -s -d \"${auth_request\\}\")\ntoken=$(echo ${resp\\} | sed 's/.*\"token\":\"\\([^\"]*\\)\".*/\\1/g')\n\n# Deregister the worker\necho \"[$(date +%T)] Calling boundary API to delete the worker ${worker_id\\}\"\ncurl ${dereg_url\\} -s -H \"Authorization: Bearer ${token\\}\" -X DELETE\n\necho \"[$(date +%T)] Deregistered worker: ${worker_id\\}\"\n\n# Remove the auth folder\necho \"[$(date +%T)] Remove auth folder\"\nrm -rf /boundary/auth_data","children":[],"resolveSyntax":true},{"id":54,"parentId":47,"label":"Worker Script Run","value":"boundary-worker server --config ./worker_config.hcl &\ndpid=$!\nwait $dpid","children":[]}]}]}]}]}